# 🚀 Replit Prompt: D3 Proposal Generator (Frontend-Only, Tabbed, AI-Powered)

Build a tabbed, browser-only web app (React + Tailwind) that lets users:

- Configure client + agency info
- Define custom section list
- Use OpenAI/Gemini to generate each section one-by-one
- Edit all sections individually
- Export as a styled `.docx` proposal

> 💡 No backend. All API calls, retries, and logic must run in-browser only.

---

## 🧩 Tab 1: Configuration

User fills out:

- **Your Company**
  - Name (required)
  - Website (optional)
  - Logo URL (optional; use placeholder if blank)
  - **Short Description** (required)
    - Will be expanded into a full “About Company” intro by the AI

- **Client Company**
  - Name (required)
  - Website (optional)
  - Logo URL (optional; use placeholder if blank)

- **Project Title**  
  *(e.g., “Consolidated Digital Growth”)*
  
- **Short Description of Service** (required)  
  *(drives context for most LLM expansions)*

- **Section List**  
  Multi-line input, pre-filled (editable):

Introduction
Definitions and Acronyms
Scope of Work
Deliverables
Timelines
Assumptions
Exclusions
Commercials / Pricing
Change Control
Contact Details
Terms & Conditions
Acceptance & Signature

yaml
Copy
Edit

---

## 🧪 Tab 2: Section Generator

For each section from the list:

- Render an **accordion panel**:
  - Section Title
  - Status tag: `Idle | Generating | Success | Modified | Error`
  - Editable `<textarea>` (AI output goes here)
  - `Generate` button per section
- At the top of tab: a `Generate All` button (runs sequentially)

### 🧠 API Logic:
- OpenAI GPT-4 (try 2×)
- If failed → Gemini Pro (try 2×)
- Max 4 attempts per section
- All fetch-based, in-browser only
- Store each result in memory + sync to `localStorage`
- If textarea is edited → mark section as `Modified`

---

## 🛠 Tab 3: Settings

- Toggle: `Use System Keys` (default ON)
- If OFF → show:
  - OpenAI API Key input
  - Gemini API Key input
- Save to `localStorage`
- All calls prefer user keys if set

---

## 📤 Export to DOCX

When all section content is filled:

- Show `Export to DOCX` button
- Generate file using [`docx`](https://www.npmjs.com/package/docx)

### 📄 Layout

- **Page 1:**
  - Title: `{ClientName}, {ProjectTitle}`
  - Subtitle: *Statement of Work*
  - Info Table:
    | Document ID | [Auto/Placeholder] |
    |-------------|--------------------|
    | Version     | `v1.0`             |
    | Date        | Today              |
  - Header: Your Logo (left) | Client Logo (right)

- **Page 2:** Auto-generated TOC

- **Pages 3+:** All sections in order with proper headings

---

## ✍️ Example SOW Section Expansions

AI must output structured content like below (based on Veridda-Walmart SOW):

---

### 📌 Introduction

Use "Your Company Short Description" and expand into 1–2 paragraphs covering:
- Years of operation, market positioning
- Services & capabilities
- Geographies served
- Tech/partner certifications (optional)

Then introduce the client using their name + website (if provided), and a short LLM-generated company profile.

---

### 📌 Definitions and Acronyms

Create a table:

| Acronym | Explanation |
|---------|-------------|
| Client | {ClientName} and its Affiliates |
| {AgencyShort} | {YourCompanyName} |
| CR | Change Request |
| SH | Stakeholder |
| SLA | Service Level Agreement |

---

### 📌 Scope of Work

Write a detailed list of:
- What will be done (tactical and strategic points)
- What channels/platforms are included
- Milestones or phases if applicable

---

### 📌 Deliverables

Output as a structured table:

| S.No | Category       | Deliverable Summary                          | Owner |
|------|----------------|-----------------------------------------------|-------|
| 1    | Product Content| A+ content, SEO optimization, creatives       | INTG  |
| 2    | Paid Campaigns | Setup & optimization of Sponsored Products    | INTG  |
| 3    | Reporting      | Weekly & monthly reports, insights            | INTG  |

---

### 📌 Client Responsibilities

LLM should generate expectations such as:
- Providing access to ad accounts
- Assigning SPOC
- Timely approvals
- Creative asset handoff

---

### 📌 Limitations

List what’s explicitly excluded:
- Platforms not covered (e.g., Amazon unless scoped)
- Creative constraints
- Feedback rounds (e.g., max 2)
- Media budget disclaimers

---

### 📌 Commercials / Pricing

Explain fee model as:

| Phase | Coverage | Monthly Fee |
|-------|----------|-------------|
| Part A | Setup (Months 1–4) | $2000/mo |
| Part B | Optimization (Months 5–12) | $1000/mo |

Include:
- Optional add-ons
- Notes on paid media spend being extra
- Billing dates and payment terms

---

## 🎨 D3 Branding Guidelines

### Fonts
```css
font-family: 'Trade Gothic', sans-serif;
Primary: Trade Gothic (Light, Regular, Bold)

Backup: Avant Grade

Colors (from CSS)
Token	Value	Usage
--d3-primary	#E9204F	Brand + CTA buttons
--d3-secondary	#1C1C1C	Text + background
--d3-glass	rgba(255,255,255,0.1)	Card bg
--d3-glass-dark	rgba(0,0,0,0.1)	Dark overlay

Use Tailwind @apply classes like:

css
Copy
Edit
.glass-morphism {
  @apply bg-white/10 backdrop-blur-md border border-white/20;
}
🧱 Folder Structure
pgsql
Copy
Edit
/public
  └── placeholder-logo.png
/src
  ├── App.jsx
  ├── components/
  │   ├── ConfigForm.jsx
  │   ├── SectionAccordion.jsx
  │   ├── SettingsTab.jsx
  │   └── ExportButton.jsx
  ├── utils/
  │   ├── apiHandler.js
  │   ├── docxBuilder.js
  │   └── storage.js
  └── index.js
.env (optional default keys)
✅ Summary
Tabbed app, browser-only

Modular LLM calls (1 per section)

Editable, human-in-the-loop section review

DOCX export styled with correct branding

User-defined API keys supported

Matches real-world proposal structure (Veridda example)